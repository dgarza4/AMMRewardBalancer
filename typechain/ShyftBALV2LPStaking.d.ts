/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface ShyftBALV2LPStakingInterface extends ethers.utils.Interface {
  functions: {
    "addPool(address,uint256,uint256)": FunctionFragment;
    "changeNumShyftPerWeek(uint256,uint256)": FunctionFragment;
    "claim(uint256,uint256)": FunctionFragment;
    "deposit(uint256,uint256,uint256)": FunctionFragment;
    "getPoolsLength()": FunctionFragment;
    "getTotalPoolLP(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256,uint256)": FunctionFragment;
    "poolData(uint256)": FunctionFragment;
    "preFund(uint256)": FunctionFragment;
    "readyPool(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "secondsAWeek()": FunctionFragment;
    "shyftToken()": FunctionFragment;
    "startDate()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userData(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPool",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNumShyftPerWeek",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPoolLP",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "poolData",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "preFund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "readyPool",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "secondsAWeek",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shyftToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeNumShyftPerWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPoolLP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preFund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "readyPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "secondsAWeek",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "shyftToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Withdrew(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrew"): EventFragment;
}

export class ShyftBALV2LPStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ShyftBALV2LPStakingInterface;

  functions: {
    addPool(
      _balLPToken: string,
      _numShyftPerWeek: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeNumShyftPerWeek(
      _balPoolId: BigNumberish,
      _numShyftPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPoolsLength(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { poolsLength: BigNumber }>;

    getTotalPoolLP(
      _balPoolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { totalPoolLP: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { pendingAmount: BigNumber }>;

    poolData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        numShyftPerWeek: BigNumber;
        lastClaimDate: BigNumber;
        shyftPerStock: BigNumber;
      }
    >;

    preFund(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    readyPool(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    secondsAWeek(overrides?: CallOverrides): Promise<[BigNumber]>;

    shyftToken(overrides?: CallOverrides): Promise<[string]>;

    startDate(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpAmount: BigNumber; preReward: BigNumber }
    >;

    withdraw(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPool(
    _balLPToken: string,
    _numShyftPerWeek: BigNumberish,
    _currentDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeNumShyftPerWeek(
    _balPoolId: BigNumberish,
    _numShyftPerWeek: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    _balPoolId: BigNumberish,
    _currentDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _balPoolId: BigNumberish,
    _amount: BigNumberish,
    _currentDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalPoolLP(
    _balPoolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _balPoolId: BigNumberish,
    _currentDate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  poolData(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      numShyftPerWeek: BigNumber;
      lastClaimDate: BigNumber;
      shyftPerStock: BigNumber;
    }
  >;

  preFund(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  readyPool(
    _balPoolId: BigNumberish,
    _currentDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  secondsAWeek(overrides?: CallOverrides): Promise<BigNumber>;

  shyftToken(overrides?: CallOverrides): Promise<string>;

  startDate(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userData(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { lpAmount: BigNumber; preReward: BigNumber }
  >;

  withdraw(
    _balPoolId: BigNumberish,
    _amount: BigNumberish,
    _currentDate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(
      _balLPToken: string,
      _numShyftPerWeek: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeNumShyftPerWeek(
      _balPoolId: BigNumberish,
      _numShyftPerWeek: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPoolLP(
      _balPoolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        numShyftPerWeek: BigNumber;
        lastClaimDate: BigNumber;
        shyftPerStock: BigNumber;
      }
    >;

    preFund(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    readyPool(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    secondsAWeek(overrides?: CallOverrides): Promise<BigNumber>;

    shyftToken(overrides?: CallOverrides): Promise<string>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpAmount: BigNumber; preReward: BigNumber }
    >;

    withdraw(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Deposited(
      _from?: string | null,
      _id?: BigNumberish | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _from: string; _id: BigNumber; _amount: BigNumber }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Withdrew(
      _to?: string | null,
      _id?: BigNumberish | null,
      _amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { _to: string; _id: BigNumber; _amount: BigNumber }
    >;
  };

  estimateGas: {
    addPool(
      _balLPToken: string,
      _numShyftPerWeek: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeNumShyftPerWeek(
      _balPoolId: BigNumberish,
      _numShyftPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalPoolLP(
      _balPoolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolData(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    preFund(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    readyPool(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    secondsAWeek(overrides?: CallOverrides): Promise<BigNumber>;

    shyftToken(overrides?: CallOverrides): Promise<BigNumber>;

    startDate(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _balLPToken: string,
      _numShyftPerWeek: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeNumShyftPerWeek(
      _balPoolId: BigNumberish,
      _numShyftPerWeek: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalPoolLP(
      _balPoolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolData(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    preFund(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    readyPool(
      _balPoolId: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    secondsAWeek(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    shyftToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startDate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _balPoolId: BigNumberish,
      _amount: BigNumberish,
      _currentDate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
